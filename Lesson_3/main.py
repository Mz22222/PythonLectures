# # Task01

# # Необходимо создать функцию sumNumbers(n), которая будет считать
# # сумму всех элементов от 1 до n.

# def sumNumbers(n):
#     summa = 0
#     for i in range(1, n + 1):
#         summa += i      
#     return summa

# a = sumNumbers(5)
# print(a) # 15

# # с неограниченным количеством аргументов

# def sum_str(*args):
#     res = ''
#     for i in args:
#         res += i 
#     return res 

# print(sum_str('q', 'e', 'l'))
# print(sum_str('q', 'e', 'l', 'r', 'l'))
# print(sum_str("1, 8, 6, 5"))




# # МОДУЛЬНОСТЬ

# import modul1
# print(modul1.max1(5, 9))

# # или есть другой вариант импорта (сразу вывод)

# from modul1 import max1
# print(max1(10, 9))

# # еще вариант (если функций много и не хотим все перечислять, то просто используем *)
  
# from modul1 import*
# print(max1(10, 9))


# # можно поменять имя модуля для удобства 

# import modul1 as m1
# print(m1.max1(5, 9))







# # РЕКУРСИЯ

# # Пользователь вводит число n. Необходимо вывести n - первых
# # членов последовательности Фибоначчи.
# # Напоминание: Последовательно Фибоначчи, это такая последовательность, в
# # которой каждое последующее число равно сумму 2-ух предыдущих

# def fib(n):
#     if n in [1,2]:
#         return 1
#     return fib(n-1) + fib(n-2)

# list_1 = []
# for i in range(1, 10):
#     list_1.append(fib(i))
# print(list_1)





# АЛГОРИТМЫ
# БЫСТРАЯ СОРТИРОВКА

# TASK:
# Два друга решили поиграть в игру: один загадывает число от 1 до 100, другой
# должен отгадать. Согласитесь, что мы можем перебирать эти значения в случайном
# порядке, например: 32, 27, 60, 73… Да, мы можем угадать в какой-то момент, но что
# если мы обратиться к стратегии “разделяй и властвуй” Обозначим друзей, друг_1
# это Иван, который загадал число, друг_2 это Петр, который отгадывает. Итак
# начнем:
# Иван загадал число 77.
# Петр: Число больше 50? Иван: Да.
# Петр: Число больше 75? Иван: Да.
# Петр: Число больше 87? Иван: Нет.
# Петр: Число больше 81? Иван: Нет.
# Петр: Число больше 78? Иван: Нет.
# Петр: Число больше 76? Иван: Да
# Число оказалось в диапазоне 76 < x < 78, значит это число 77. Задача решена. На
# самом деле мы сейчас познакомились с алгоритмом бинарного поиска, который
# также принадлежит стратегии “разделяй и властвуй”. Давайте перейдем к
# обсуждению программного кода быстрой сортировки.

# def quicksort(array):
#     if len(array) <= 1: # базис
#         return array
#     else:
#         pivot = array[0] #первый элемент
#     less = [i for i in array[1:] if i <= pivot] # [1:] - не берем первый элемент
#     greater = [i for i in array[1:] if i > pivot] 
#     return quicksort(less) + [pivot] + quicksort(greater)
# print(quicksort([10, 5, 2, 3]))


# # как работает? 

# # ● 1-е повторение рекурсии:
# #     ○ array = [10, 5, 2, 3]
# #     ○ pivot = 10
# #     ○ less = [5, 2, 3]
# #     ○ greater = []
# #     ○ return quicksort([5, 2, 3]) + [10] + quicksort([])

# # ● 2-е повторение рекурсии:
# #     ○ array = [5, 2, 3]
# #     ○ pivot = 5
# #     ○ less = [2, 3]
# #     ○ greater = []
# #     ○ return quicksort([2, 3]) + [5] + quicksort([]) # Важно! Не забывайте, что
# # здесь помимо вызова рекурсии добавляется список [10]

# #     ● 3-е повторение рекурсии:
# #     ○ array = [2, 3]
# #     ○ return [2, 3] # Сработал базовый случай рекурсии

# # На этом работа рекурсии завершилась и итоговый список будет выглядеть таким
# # образом: [2, 3] + [5] + [10] = [2, 3, 5, 10]



# СОРТИРОВКА СЛИЯНИЕМ

def merge_sort(nums):
    if len(nums) > 1:
        mid = len(nums) // 2 # хранятся значения 
        left = nums[:mid] # только левая часть i
        right = nums[mid:] # только правая часть j 
        merge_sort(left)
        merge_sort(right)
        i = j = k = 0 # k - итог
        
        while i < len(left) and j < len(right):
            if left[i] < right[j]:
                nums[k] = left[i]
                i += 1
            else:
                nums[k] = right[j]
                j += 1
            k += 1
        
        while i < len(left):
            nums[k] = left[i]
            i += 1
            k += 1
        
        while j < len(right):
            nums[k] = right[j]
            j += 1
            k += 1
    
# list_1 = [38, 27, 43, 3, 9, 82, 10]
# merge_sort(list_1)
# print(list_1)
            
nums = [38, 27, 43, 3, 9, 82, 10]
merge_sort(nums)
print(nums)
